// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace AirShare.Pages.Controls
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\My Projects\C# Git\AirShare\AirShare\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\My Projects\C# Git\AirShare\AirShare\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\My Projects\C# Git\AirShare\AirShare\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\My Projects\C# Git\AirShare\AirShare\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\My Projects\C# Git\AirShare\AirShare\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\My Projects\C# Git\AirShare\AirShare\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\My Projects\C# Git\AirShare\AirShare\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\My Projects\C# Git\AirShare\AirShare\_Imports.razor"
using AirShare.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\My Projects\C# Git\AirShare\AirShare\_Imports.razor"
using AirShare.Pages.Controls;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\My Projects\C# Git\AirShare\AirShare\_Imports.razor"
using Xabe.FFmpeg;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\My Projects\C# Git\AirShare\AirShare\Pages\Controls\Explorer.razor"
using AirShare;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/explorer")]
    public partial class Explorer : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 540 "D:\My Projects\C# Git\AirShare\AirShare\Pages\Controls\Explorer.razor"
      


    User usr { get; set; }
    bool authed { get; set; }
    bool Failed { get; set; }
    string msg { get; set; }
    string fileHashLink { get; set; } = "";

    bool ShowProp, ShowDelete, ShowRename, ShowNewfolder, ShowNewfile, ShowVdoEditor;
    string DeleteTxt, RenameTxt, NewfolderTxt, NewfileTxt;


    bool ShowFilePopup = false;
    string ShowingUrl;
    FSFileAttrib ShowingType;

    FSEntry SelectedEntry { get; set; }
    bool IsSelectedFile { get; set; }

    System.IO.FileInfo SelFileInfo;
    System.IO.DirectoryInfo SelDirectoryInfo;

    [Parameter]
    public string Path { get; set; }

    DirectoryEntries DE;


    protected override void OnInitialized()
    {

        Failed = false;


        NavMan.LocationChanged += LocationChanged;

        

#line default
#line hidden
#nullable disable
#nullable restore
#line 577 "D:\My Projects\C# Git\AirShare\AirShare\Pages\Controls\Explorer.razor"
         if (Path == null)
        {
            try
            {
                string q = new Uri(NavMan.Uri).Query.ToString().TrimStart('?');
                Path = Uri.UnescapeDataString(q.TrimStart('?')).Trim('"');
            }
            catch (Exception ex)
            {
                //TODO: Use more understandable err msgs
                Console.WriteLine("Path error " + ex.Message);
                msg = "2";
                Path = "\\";

            }
        }

#line default
#line hidden
#nullable disable
#nullable restore
#line 592 "D:\My Projects\C# Git\AirShare\AirShare\Pages\Controls\Explorer.razor"
         

        usr = Userdata.Auth();
        if (usr == null)
        {
            msg = "0";
            authed = false;

            return;
        }

        LoadDir();



        base.OnInitialized();

    }

    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        //string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
        //Core.Log($"cd {e.Location} while {Path}");

        int lcq = e.Location.IndexOf('?');
        if (lcq == -1)
        {
            return;
        }

        string lcp = Uri.UnescapeDataString(e.Location.Substring(lcq + 1));


        if (lcp != Path)
        {
            Core.Log($"cd lcp {lcp} \t Path {Path}");
            Path = lcp;
            LoadDir();
        }

    }

    //void IDisposable.Dispose()
    //{
    //    // Unsubscribe from the event when our component is disposed
    //    NavigationManager.LocationChanged -= LocationChanged;
    //}

    string LoadedPath = "`";
    void LoadDir(bool Refresh = false)
    {
        if (!Refresh && LoadedPath == Path)
        {
            return;
        }
        LoadedPath = Path;

        if (usr != null && usr.Validate(Path, FSPermission.Read))
        {
            authed = true;
            Failed = false;
            msg = "";
        }
        else
        {
            msg = "You are not authorized to view this content";
            authed = false;
            Failed = true;
            return;
        }

        try
        {
            DE = FSService.ListFiles(Path, usr);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Explore error " + Path + " >> " + ex.Message);
            DE = new DirectoryEntries();
            msg = "1";
            Failed = true;
            Core.Log(msg + $"\t {Userdata.Token}");
        }


        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await TryAuth();
            LoadDir();

            await JSRuntime.InvokeVoidAsync("DrawUI");
        }

        // string QPath;
        try
        {
            string q = new Uri(NavMan.Uri).Query.ToString().TrimStart('?');
            Path = Uri.UnescapeDataString(q.TrimStart('?')).Trim('"');
        }
        catch (Exception)
        {

        }

        await base.OnAfterRenderAsync(firstRender);

    }

    async Task TryAuth()
    {
        if (!authed)
        {
            string ck = await JSRuntime.InvokeAsync<string>("GetCookie", "ut");
            if (ck != null)
            {
                User cu = Core.AuthToken(ck);
                if (cu != null)
                {
                    usr = cu;
                    Userdata.Token = usr.Token();
                    Core.Log($"Explorer Success : Auth Token cookie {ck}");

                    ResetDefault();

                    StateHasChanged();
                    return;
                }
            }

            Core.Log($"Explorer Failed : Auth Token cookie {ck}");
            NavMan.NavigateTo("/?explorer?" + Uri.EscapeDataString(Path), true);
            return;
        }

    }


    void ResetDefault()
    {
        authed = true;
        Failed = false;
        LoadDir();
    }


    public void SelectEntry(FSEntry fse, bool IsFile)
    {
        SelectedEntry = fse;
        IsSelectedFile = IsFile;
        fileHashLink = null;

        if (IsFile)
        {
            SelDirectoryInfo = null;
            SelFileInfo = FSService.GetFileInfo(System.IO.Path.Combine(DE.Path, fse.Name));
        }
        else
        {
            SelFileInfo = null;
            SelDirectoryInfo = FSService.GetDirectoryInfo(System.IO.Path.Combine(DE.Path, fse.Name));
        }
    }


    string GetSelectedIcon()
    {
        if (SelectedEntry != null)
        {
            return SelectedEntry.IconicTypeCSS;
        }
        return "i-" + FSFileAttrib.Other.ToString();
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        StateHasChanged();
    }


    public void Navigate(string name)
    {
        NavigateAbs(System.IO.Path.Combine(DE.Path, name));
    }
    public void NavigateAbs(string path)
    {
        Path = path;
        NavMan.NavigateTo("explorer?" + Uri.EscapeDataString(path), false);
        LoadDir();
        StateHasChanged();
    }

    public void NavigateBack()
    {
        for (int i = 0; i < 10; i++)
        {
            string P = FSService.ParentDir(Path);
            if (usr.Validate(P, FSPermission.Read))
            {
                NavigateAbs(P);
                return;
            }
        }
        NavigateHome();

    }
    public void NavigateHome()
    {
        NavigateAbs("-/");
    }

    public void NavigateText()
    {
        NavigateAbs(FSService.NavigateText(Path));
    }

    public void NavigateFile(FSEntry fse, bool ShowNewFilePopup = true)
    {
        string fp = Uri.EscapeDataString(System.IO.Path.Combine(DE.Path, fse.Name));
        string ename = Uri.EscapeDataString(fse.Name);
        if (ShowNewFilePopup)
        {
            if (fse.CheckIs(FSFileAttrib.Document))
            {
                ShowingUrl = $"{NavMan.BaseUri}OpenStream/{ename}?" + fp;
                ShowingType = FSFileAttrib.Document;
            }
            else if (fse.CheckIs(FSFileAttrib.Image))
            {
                ShowingUrl = $"{NavMan.BaseUri}OpenStream/{ename}?" + fp;
                ShowingType = FSFileAttrib.Image;
            }
            else if (fse.CheckIs(FSFileAttrib.Video))
            {
                ShowingUrl = $"{NavMan.BaseUri}PlayVideo/{ename}?" + fp;
                ShowingType = FSFileAttrib.Video;
            }
            else if (fse.CheckIs(FSFileAttrib.Audio))
            {
                ShowingUrl = $"{NavMan.BaseUri}PlayAudio/{ename}?" + fp;
                ShowingType = FSFileAttrib.Audio;
            }
            else if (fse.CheckIs(FSFileAttrib.Text))
            {
                //TODO : OpenText
                ShowingUrl = $"{NavMan.BaseUri}OpenStream/{ename}?" + fp;
                ShowingType = FSFileAttrib.Text;
            }
            else
            {
                ShowingUrl = $"{NavMan.BaseUri}OpenFile/{ename}?" + fp;
            }
            ShowFilePopup = true;
            if (ShowingType == FSFileAttrib.Image)
            {
                //StateHasChanged();
                //await JSRuntime.InvokeVoidAsync("InitPhotoEditor");
            }
        }
        else
        {
            if (fse.CheckIs(FSFileAttrib.Document | FSFileAttrib.Image))
            {
                NavMan.NavigateTo($"OpenStream/{ename}?" + fp, true);
            }
            else if (fse.CheckIs(FSFileAttrib.Video))
            {
                NavMan.NavigateTo($"PlayVideo/{ename}?" + fp, true);
            }
            else if (fse.CheckIs(FSFileAttrib.Audio))
            {
                NavMan.NavigateTo($"PlayAudio/{ename}?" + fp, true);
            }
            else if (fse.CheckIs(FSFileAttrib.Text))
            {
                //TODO : OpenText
                NavMan.NavigateTo($"OpenStream/{ename}?" + fp, true);
            }
            else
            {
                OpenInNewTab($"OpenFile/{ename}?" + fp);
            }
        }
    }


    public void DownloadFile(FSEntry fse)
    {
        string fp = Uri.EscapeDataString(System.IO.Path.Combine(DE.Path, fse.Name));
        string ename = Uri.EscapeDataString(fse.Name);

        OpenInNewTab($"OpenFile/{ename}?" + fp);

    }

    public void DownloadFileSubDir(FSEntry fse, DirectoryEntries SDE)
    {
        string fp = Uri.EscapeDataString(System.IO.Path.Combine(SDE.Path, fse.Name));
        string ename = Uri.EscapeDataString(fse.Name);

        OpenInNewTab($"OpenFile/{ename}?" + fp);

    }

    public async void DownloadDir(FSEntry fse, bool Rec = false)
    {
        string fp = System.IO.Path.Combine(DE.Path, fse.Name);
        // string fpe = Uri.EscapeDataString(fp);
        DirectoryEntries Fls = FSService.ListFiles(fp, usr);

        foreach (FSEntry fe in Fls.Files)
        {
            DownloadFileSubDir(fe, Fls);
            await Task.Delay(200);
        }

        if (Rec)
        {
            foreach (FSEntry de in Fls.SubDirs)
            {
                DownloadSubDir(Fls, de, Rec);
            }
        }

    }

    private async void DownloadSubDir(DirectoryEntries SDE, FSEntry fse, bool Rec = false)
    {
        string fp = System.IO.Path.Combine(SDE.Path, fse.Name);
        // string fpe = Uri.EscapeDataString(fp);
        DirectoryEntries Fls = FSService.ListFiles(fp, usr);

        foreach (FSEntry fe in Fls.Files)
        {
            DownloadFileSubDir(fe, Fls);
            await Task.Delay(200);
        }

        if (Rec)
        {
            foreach (FSEntry de in Fls.SubDirs)
            {
                DownloadSubDir(Fls, de, Rec);
            }
        }

    }

    public async void OpenInNewTab(string Path)
    {
        await JSRuntime.InvokeVoidAsync("OpenNew", Path);
    }


    public string FileHashLink(FSEntry fse)
    {
        string fp = System.IO.Path.Combine(DE.Path, fse.Name);
        string ename = Uri.EscapeDataString(fse.Name);

        string H = HashLinks.AddFile(fp, 2);

        return $"{NavMan.BaseUri}hlnk/{ename}?{H}";

    }

    public string GetHashedDirectory(FSEntry fse)
    {
        string fp = System.IO.Path.Combine(DE.Path, fse.Name);
        string ename = Uri.EscapeDataString(fse.Name);

        if (!usr.Validate(fp, FSPermission.Read))
        {
            return "Access Denided!";
        }

        string H = HashLinks.AddDirectory(new HashedDirectory(fp, NavMan.BaseUri, 5, "bash"));

        return $"hlnk/{ename}?{H}";

    }

    public string GetHashedDirectoryURL(FSEntry fse)
    {

        return $"{NavMan.BaseUri}{GetHashedDirectory(fse)}";

    }

    string GetSizeString(long size)
    {
        int ext = 0;
        long Size = size;
        string Suffix = "";
        while (Size > 1024)
        {
            ext++;
            Size /= 1024;
        }
        switch (ext)
        {
            case 0:
                Suffix = "bytes";
                break;
            case 1:
                Suffix = "KB";
                break;
            case 2:
                Suffix = "MB";
                break;
            case 3:
                Suffix = "GB";
                break;
            case 4:
                Suffix = "TB";
                break;
        }
        return $"{Size} {Suffix}";
    }

    void NewFolder()
    {
        if (string.IsNullOrWhiteSpace(NewfolderTxt))
        {
            return;
        }
        var res = FSService.NewFolder(System.IO.Path.Combine(DE?.Path, NewfolderTxt));
        if (res.Success)
        {
            LoadDir(true);
        }
        NewfolderTxt = "New Folder";
        ShowNewfolder = false;
    }
    void NewFile()
    {
        if (string.IsNullOrWhiteSpace(NewfileTxt))
        {
            return;
        }
        var res = FSService.NewFile(System.IO.Path.Combine(DE?.Path, NewfileTxt));
        if (res.Success)
        {
            LoadDir(true);
        }
        NewfileTxt = "New File.txt";
        ShowNewfile = false;
    }

    Dictionary<string, string> PathToBreadCrumb(string path)
    {
        var Out = new Dictionary<string, string>();
        string s = "%2F";
        if (path != null)
        {
            foreach (var item in path?.Split(System.IO.Path.DirectorySeparatorChar))
            {
                if (!string.IsNullOrWhiteSpace(item))
                {
                    s += item;
                    s += "%2F";
                    Out.Add($"{s}", item);
                }
            }
        }
        return Out;
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserData Userdata { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.JSInterop.IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.AspNetCore.Components.NavigationManager NavMan { get; set; }
    }
}
#pragma warning restore 1591
