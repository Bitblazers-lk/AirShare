// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace AirShare.Pages.Controls
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\My Projects\C# Git\AirShare\AirShare\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\My Projects\C# Git\AirShare\AirShare\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\My Projects\C# Git\AirShare\AirShare\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\My Projects\C# Git\AirShare\AirShare\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\My Projects\C# Git\AirShare\AirShare\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\My Projects\C# Git\AirShare\AirShare\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\My Projects\C# Git\AirShare\AirShare\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\My Projects\C# Git\AirShare\AirShare\_Imports.razor"
using AirShare.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\My Projects\C# Git\AirShare\AirShare\_Imports.razor"
using AirShare.Pages.Controls;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\My Projects\C# Git\AirShare\AirShare\_Imports.razor"
using Xabe.FFmpeg;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\My Projects\C# Git\AirShare\AirShare\Pages\Controls\Settings.razor"
using AirShare;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/settings")]
    public partial class Settings : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 97 "D:\My Projects\C# Git\AirShare\AirShare\Pages\Controls\Settings.razor"
 
    string msg { get; set; }

    User usr { get; set; }
    bool authed { get; set; } = false;
    bool Failed { get; set; }

    string ProgOut { get; set; }
    string ProgErr { get; set; }



    protected override void OnInitialized()
    {

        Failed = false;



        usr = Userdata.Auth();
        if (usr == null)
        {
            msg = "";
            authed = false;

            return;
        }



        base.OnInitialized();

    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await TryAuth();
        }


    }

    async Task TryAuth()
    {
        if (!authed)
        {
            string ck = await JSRuntime.InvokeAsync<string>("GetCookie", "ut");
            if (ck != null)
            {
                User cu = Core.AuthToken(ck);
                if (cu != null)
                {
                    usr = cu;
                    if (usr.Lvl >= UserLevel.root)
                    {
                        Userdata.Token = usr.Token();
                        Core.Log($"Settings Success : Auth Token cookie {ck}");

                        ResetDefault();

                        StateHasChanged();
                        return;
                    }
                    else
                    {
                        msg = "You are not an Admin";
                        NavMan.NavigateTo("/signout", true);
                        return;
                    }
                }
            }

            Core.Log($"Settings Failed : Auth Token cookie {ck}");
            NavMan.NavigateTo("/?Settings", true);
            return;
        }

    }


    void ResetDefault()
    {
        authed = true;
        Failed = false;
    }


    void RunSample()
    {
        try
        {
            msg = ProgramMgr.RunSample(new ProgramIO() { OutputRec = ProgOutRec, ErrorRec = ProgErrRec }) ? "Program Started" :
                "Program starting failed";
            ProgOut = "";
            ProgErr = "";
            StateHasChanged();
        }
        catch (System.Exception ex)
        {
            msg = ex.Message;
        }

    }

    async void ProgOutRec(string S)
    {
        ProgOut = S + Environment.NewLine + ProgOut;
        await InvokeAsync(StateHasChanged);
    }
    async void ProgErrRec(string S)
    {
        ProgErr = S + Environment.NewLine + ProgErr;
        await InvokeAsync(StateHasChanged);
    }

    void UpdateAir_Share()
    {
        msg = ProgramMgr.UpdateCodeBase(new ProgramIO() { OutputRec = ProgOutRec, ErrorRec = ProgErrRec }) ? "Updating" :
            "Program starting failed";
        ProgOut = "";
        ProgErr = "";
        StateHasChanged();
    }

    string LetMeSleepStat
    {
        get
        {
            return $"Let me sleep is turned {(AirShare.Settings.SystemControlSettings.LetMeSleep ? "on" : "off") }";
        }
    }

    public void SwitchLetMeSleep()
    {
        AirShare.Settings.SystemControlSettings.LetMeSleep = !AirShare.Settings.SystemControlSettings.LetMeSleep;

        SaveSystemControlSettings();
    }
    public void SaveSystemControlSettings()
    {
        AirShare.Settings.SaveSystemControlSettings();
    }

    public void SwitchAutoUpdate()
    {
        AirShare.Settings.SystemControlSettings.AutoUpdate = !AirShare.Settings.SystemControlSettings.AutoUpdate;
        SaveSystemControlSettings();
    }

     public async void SwitchPublicServer()
    {
        AirShare.Settings.SystemControlSettings.PublicServer = !AirShare.Settings.SystemControlSettings.PublicServer;
        SaveSystemControlSettings();

        if(AirShare.Settings.SystemControlSettings.PublicServer )
        {
            await ProgramMgr.MakePublicServer();
        }
    }
    public async void SwitchBroadcastPublicServer()
    {
        AirShare.Settings.SystemControlSettings.BroadcastPublicServer = !AirShare.Settings.SystemControlSettings.BroadcastPublicServer;
        SaveSystemControlSettings();

        if(AirShare.Settings.SystemControlSettings.PublicServer )
        {
            await ProgramMgr.MakePublicServer();
        }

    }

    public void ViewPublicServerLog()
    {
        ProgOut = AirShare.Settings.SystemControlSettings.PublicServerLog;
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserData Userdata { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.JSInterop.IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.AspNetCore.Components.NavigationManager NavMan { get; set; }
    }
}
#pragma warning restore 1591
