@inject Microsoft.AspNetCore.Components.NavigationManager NavMan
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@inject UserData Userdata

@if (!string.IsNullOrWhiteSpace(msg))
{
    <div class="alert alert-danger">@msg</div>
}
<div class="form-group mb-3">
    <label>Username</label>
    <input type="text" class="form-control" @bind="TxtName">
</div>
<div class="form-group mb-3">
    <label>Password</label>
    <input type="password" class="form-control" @bind="TxtPass">
</div>
<div class="form-group mb-3">
    <button type="button" class="btn btn-rounded btn-success text-white" @onclick="(() => LoginClick())" style="width:100%">Login</button>
</div>

@code {
    string msg { get; set; }
    string TxtName { get; set; }
    string TxtPass { get; set; }

    [Parameter] public Action<bool, User> OnLoginAttempt { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string ck = await JSRuntime.InvokeAsync<string>("GetCookie", "ut");
            if (ck != null)
            {
                Core.Log($"Auth Token cookie {ck}");
                User cu = Core.AuthToken(ck);
                if (cu != null)
                {
                    await Go(cu);
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("EraseCookie", "ut");
                }

            }
        }
    }

    public async void LoginClick()
    {
        User usr = Core.Auth(TxtName, TxtPass);
        OnLoginAttempt?.Invoke(usr != null, usr);
        await Go(usr);
    }

    public async Task Go(User usr)
    {
        if (usr != null)
        {
            Userdata.Token = usr.Token();
            await JSRuntime.InvokeVoidAsync("SetCookie", "ut", Userdata.Token);
            msg = "Success " + usr.Name;

            //if (Path == null)
            //{
            //    Path = "\\";
            //}

            //if (!usr.Validate(Path))
            //{
            //    if (usr.Allowed.Length != 0)
            //    {
            //        Path = usr.Allowed[0];
            //    }
            //    else
            //    {
            //        Path = Core.CreateAirSharedDir();
            //    }
            //}

            Core.Log($"Logged in {usr.Name} as {usr.Lvl} user");

            // NavMan.NavigateTo("explorer?" + Uri.EscapeDataString(Path), false);
        }
        else
        {
            msg = "Wrong user name / password";
        }

    }
}
