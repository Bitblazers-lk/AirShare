@inject Microsoft.AspNetCore.Components.NavigationManager NavMan
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@inject UserData Userdata
@using AirShare;




<div class="height-card box-margin">
    <!-- Card -->
    <div class="card">
        @if (!string.IsNullOrWhiteSpace(URL))
        {
            if (urlisOk)
            {
                <iframe class="card-img-top" src="@YoutubeDownloader.GetEmbedURL(URL)" style="height:300px"></iframe>
                @*<img style="width:100%;height:200px" src="@YoutubeDownloader.GetThumbnail(URL)" />*@
            }
            else
            {
                <div class="alert alert-danger">Please Enter Vaild Youtube URL...</div>
            }
        }

        <div class="card-body text-center">

            <p class="card-text">Pate URL To Download Video...</p>
            <p class="card-text">
                <div class="col-12">
                    <div class="input-group mb-0">
                        <input type="text" class="form-control" placeholder="Enter Youtube URL..." @bind="@URL">
                        <div class="input-group-append">
                            <button class="btn btn-secondary" type="button" @onclick="GetInfo"><i class="fa fa-arrow-circle-o-right"></i></button>
                        </div>
                    </div>
                </div>
            </p>
            @if (!string.IsNullOrWhiteSpace(Msg))
            {
                <div class="alert alert-danger">@Msg</div>
            }

            @if (info != null)
            {
                <h5 class="mt-20">
                    <a class="text-dark">@info.Title</a>
                </h5>
            }
            <hr>
            <div class="form-row">

                <div class="form-group col-md-6">
                    <label>Format</label>
                    <select class="form-control" @bind="SelQuality">
                        <option value="-" selected disabled>Choose Quality</option>
                        @foreach (var item in Enum.GetNames(typeof(NYoutubeDL.Helpers.Enums.VideoFormat)))
                        {
                            <option value="@item">@item</option>
                        }
                    </select>
                </div>

                <div class="form-group col-md-6">
                    <label class="text-white">Download</label>
                    <button class="btn btn-sm btn-success text-white " style="width:100%" @onclick="Download">Download Video</button>
                </div>
            </div>
            @if (!string.IsNullOrWhiteSpace(Prog))
            {
                <hr />
                <div class="form-row">
                    <div class="form-group col-md-12">
                        <div class="progress mb-0">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="@Prog" aria-valuemin="0" aria-valuemax="100" style="width: @Prog%"></div>
                        </div>
                        <label>@Prog %</label>
                        <label class="pull-right">Speed : @Spd  | Eta : @Eta</label>
                    </div>
                </div>
            }
        </div>
    </div>
</div>


@code {
    [Parameter] public string Path { get; set; }

    YoutubeDownloader YD = new YoutubeDownloader();
    DownloadInfo info;
    bool urlisOk;
    public string URL
    {
        get
        {
            return _FileUrl;
        }
        set
        {
            _FileUrl = value;
            Prog = "";
        }
    }
    string _FileUrl;
    string SelQuality;
    string Msg;
    string Prog, Spd, Eta;

    protected override void OnInitialized()
    {
        YD.OnDownloading += Ondl;
        YD.OnLog += Log;
        base.OnInitialized();
    }

    string FileHashLink(string fp)
    {
        string fnme = System.IO.Path.GetFileName(fp);
        string ename = Uri.EscapeDataString(fnme);

        string H = HashLinks.AddFile(fp, 2);

        return $"{NavMan.BaseUri}hlnk/{ename}?{H}";
    }
    void Download()
    {
        Msg = "";
        if (!Enum.TryParse(typeof(NYoutubeDL.Helpers.Enums.VideoFormat), SelQuality, out _))
        {
            Msg = "Please Select Quality...";
            StateHasChanged();
            return;
        }
        var Q = (NYoutubeDL.Helpers.Enums.VideoFormat)Enum.Parse(typeof(NYoutubeDL.Helpers.Enums.VideoFormat), SelQuality);
        YD.DownloadVideo(URL, Path, Q);
    }

    async void GetInfo()
    {
        Msg = "";
        info = null;
        if (YoutubeDownloader.IsVaildYoutubeUrl(URL))
        {
            urlisOk = true;
            StateHasChanged();
            info = await YD.GetVideoInfo(URL);
        }
        StateHasChanged();
    }

    void Ondl(DownloadInfo ino)
    {
        if (ino != null)
        {
            Prog = ino.Status.Replace("%", "");
            Eta = ino.Eta;
            Spd = ino.DownloadRate;
            //lock (this){
            //    StateHasChanged();
            //}
        }
    }
    void Log(string s)
    {
        //Console.WriteLine(s);
    }
}
