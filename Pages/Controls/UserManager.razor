@page "/users"
@inject Microsoft.AspNetCore.Components.NavigationManager NavMan
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@using AirShare;

<div>
    <table class="table table-bordered" style="border: 1px solid black; width: 100%">
        @foreach (User usr in Core.GetUsers())
        {
            <tr>
                <td>@usr.Name</td>
                <td>@usr.Lvl</td>
                <td>

                    <table>
                        @foreach (var p in @usr.Allowed)
                        {
                            <tr>
                                <td>@p.Key</td>
                                <td>@p.Value</td>
                            </tr>
                        }

                    </table>
                </td>
                <td>
                    <button class="btn btn-danger" @onclick="(() => Remove(usr.Name))"><i class="fa fa-trash"></i></button>
                </td>

            </tr>
        }
    </table>
</div>

<h2> @msg </h2>

<div>
    @if(!IsDefault)
    {
    <div class="form-group">
        <label>Admin Name</label>
        <input class="form-control" name="name" type="text" @bind="TxtName" />
    </div>
    <div class="form-group">
        <label>Admin Pass</label>
        <input class="form-control" name="pass" type="password" @bind="TxtPass" />
    </div>
    <hr />
    <div class="form-group">
        <label>New Name</label>
        <input class="form-control" name="name" type="text" @bind="TxtNewName" />
    </div>
    <div class="form-group">
        <label>Permission Level</label>
        <select @bind="Perm">
            <option value="guest"> Guest - Read only access to AirShared Folder </option>
            <option value="friend"> Friend - Access to the following </option>
            <option value="root"> Admin - Full Access to all files (root/Dangerous) </option>
        </select>
    </div>
    }
    <div class="form-group">
        <label>New Pass</label>
        <input class="form-control" name="pass" type="password" @bind="TxtNewPass" />
    </div>
    <div class="form-group">
        <label>New Pass again</label>
        <input class="form-control" name="pass2" type="password" @bind="TxtNewPass2" />
    </div>
</div>

@if (Perm == "friend")
{
    <div class="form-group">
    <label>Read Only Paths</label>
    <textarea class="form-control" name="AllowedPaths" cols="40" rows="5" @bind="TxtPathsR"></textarea>
</div>
    <div class="form-group">
        <label>Read and Write Paths</label>
        <textarea class="form-control" name="AllowedPaths" cols="40" rows="5" @bind="TxtPathsRW"></textarea>
    </div>
    <div class="form-group">
        <label>Read, Write and Excecute Paths</label>
        <textarea class="form-control" name="AllowedPaths" cols="40" rows="5" @bind="TxtPathsRWX"></textarea>
    </div>
}
<div class="form-group">
    <input class="btn btn-success" type="button" @onclick="(() => Add())" value="Add" />
</div>





@code
{
    string msg { get; set; }
    string TxtName { get; set; }
    string TxtPass { get; set; }

    string TxtNewName { get; set; }
    string TxtNewPass { get; set; }
    string TxtNewPass2 { get; set; }

    string Perm { get; set; } = "friend";
    string TxtPathsR { get; set; } = "/\\";
    string TxtPathsRW { get; set; } = "";
    string TxtPathsRWX { get; set; } = "";

    bool IsDefault { get; set; } = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (Core.Authdetails.IsDefault)
        {
            msg = "Default Admin User Name is 'admin' password is 'pass' . They are entered. Type in your new password now ";
            TxtName = "admin";
            TxtPass = "pass";
            TxtNewName = "admin";
            Perm = "root";
            IsDefault = true;
        }
    }





    public async void Add()
    {
        bool GoHome = false;
        if (TxtNewName == null || TxtNewName.Length < 2)
        {
            msg = "User name too short";
            return;
        }

        if (TxtNewPass == null || TxtNewPass.Length < 6)
        {
            msg = "Password too short";
            return;
        }

        if (TxtNewPass2 != TxtNewPass)
        {
            msg = "Two Passwords doesn't match ";
            return;
        }

        //if (TxtPaths == null || TxtPaths.Length == 0)
        //{
        // msg = "No paths are entered";
        //}


        User usr = Core.Auth(TxtName, TxtPass);
        if (usr != null)
        {
            if (usr.Lvl == UserLevel.root)
            {
                UserLevel NUL;
                switch (Perm)
                {
                    case "guest":
                        NUL = UserLevel.guest;
                        TxtPathsR = "";
                        TxtPathsRW = "";
                        TxtPathsRWX = "";
                        break;

                    case "friend":
                        NUL = UserLevel.friend;
                        break;

                    case "root":
                        NUL = UserLevel.root;
                        TxtPathsR = "";
                        TxtPathsRW = "";
                        TxtPathsRWX = "/\n/\\";
                        if (IsDefault) GoHome = true;
                        Core.Authdetails.IsDefault = false;
                        break;

                    default:
                        msg = $"Permission Level {Perm} is not valid";
                        StateHasChanged();
                        return;
                }

                if (usr.Name == TxtNewName)
                {
                    NUL = UserLevel.root;
                }

                User newusr = Core.AddUser(TxtNewName, TxtNewPass, NUL, TxtPathsR, TxtPathsRW, TxtPathsRWX);
                msg = $"Success adding {newusr.Name} as {newusr.Lvl} ";
                // msg = "Success " + Core.AddUser(TxtNewName, TxtNewPass, UserLevel.censored, TxtPathsR, TxtPathsRW, TxtPathsRWX);

                TxtNewName = "";
                TxtNewPass = "";
                TxtNewPass2 = "";
                TxtPathsR = "";
                TxtPathsRW = "";
                TxtPathsRWX = "";

            }
            else
            {
                msg = "You are not the admin";
            }
        }
        else
        {
            msg = "Wrong admin user name / password";
        }

        StateHasChanged();

        if (GoHome)
        {            
            await Task.Delay(1000);
            NavMan.NavigateTo("/", true);
        }
    }

    public void Remove(string name)
    {
        User usr = Core.Auth(TxtName, TxtPass);
        if (usr != null)
        {
            if (usr.Lvl == UserLevel.root)
            {
                if (name != usr.Name)
                {
                    Core.RemoveUser(name);
                    msg = $"Success Removing {name} ";
                }
                else
                {
                    msg = "You can't remove yourself";
                }
            }
            else
            {
                msg = "You are not the admin";
            }
        }
        else
        {
            msg = "Wrong admin user name / password";
        }

        StateHasChanged();
    }

}