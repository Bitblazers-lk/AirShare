@page "/explorer"
@* @implement IDisposable *@
@inject Microsoft.AspNetCore.Components.NavigationManager NavMan
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@inject UserData Userdata
@using AirShare;


@if (authed && !Failed)
{
    <header class="top-header-area d-flex align-items-center justify-content-between" style="left:0;width:100%">
        <div class="left-side-content-area d-flex align-items-center">

            <div class="ecaps-triggers mr-1 mr-sm-3" @onclick="(() => NavigateBack())">
                <div class="menu-collasped">
                    <i class="fa fa-chevron-left"></i>
                </div>
                <div class="mobile-menu-open">
                    <i class="fa fa-chevron-left"></i>
                </div>
            </div>

            <!-- Left Side Nav -->
            <ul class="left-side-navbar d-flex align-items-center" style="width: 100%;">
                <li class="hide-phone app-search" style=" width: 100%;    margin-left: 0px;">
                    <input type="text" class="form-control" style="width: 100%;" placeholder="Search..." id="myInput" onkeyup="searchTable()">
                    <span class="bx bx-search-alt"></span>
                </li>
            </ul>

        </div>

        <div class="right-side-navbar d-flex align-items-center justify-content-end">
            <!-- Mobile Trigger -->
            <div class="right-side-trigger" id="rightSideTrigger">
                <i class="bx bx-menu-alt-right"></i>
            </div>
            <!-- Top Bar Nav -->
            <ul class="right-side-content d-flex align-items-center">

                <!-- Full Screen Mode -->
                <li class="full-screen-mode ml-1">
                    <a href="javascript:" id="fullScreenMode"><i class="bx bx-exit-fullscreen"></i></a>
                </li>


                <li class="nav-item dropdown ">
                    <button type="button" class="btn dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><i class="fa fa-user-o"></i></button>
                    <div class="dropdown-menu profile dropdown-menu-right">
                        <!-- User Profile Area -->
                        <div class="user-profile-area">
                            @if (authed)
                            {
                                <a href="#" class="dropdown-item"><i class="bx bx-user font-15" aria-hidden="true"></i> My Profile</a>
                                <a href="#" class="dropdown-item"><i class="bx bx-wrench font-15" aria-hidden="true"></i> Settings</a>
                                <a href="#" class="dropdown-item"><i class="bx bx-power-off font-15" aria-hidden="true"></i> Sign-out</a>
                            }
                            else
                            {
                                <a href="#" class="dropdown-item"><i class="bx bx-user font-15" aria-hidden="true"></i> My Profile</a>
                            }
                        </div>
                    </div>
                </li>
            </ul>
        </div>
    </header>
    @*<nav aria-label="breadcrumb">
            <ol class="breadcrumb mb-0">
                @{
                    int i = 0;
                    var lst = PathToBreadCrumb(DE.Path);
                }
                @if (lst.Count == 0)
                {
                    <li class="breadcrumb-item active" aria-current="page">Root\</li>
                }
                else
                {
                    @foreach (var item in lst)
                    {
                        i++;
                        <li class="breadcrumb-item @(lst.Count==i?"active":"")" aria-current="@(lst.Count==i?"page":"")">
                            @if (lst.Count == i)
                            {
                                @item.Value
                            }
                            else
                            {
                                <a href="explorer?@item.Key">@item.Value</a>
                            }
                        </li>
                    }
                }
            </ol>
        </nav>*@
    <div class="file-area table-responsive">
        <table class="file-ex file-ex-hover table-borderless table-nowrap" id="myTable">
            <colgroup>
                <col style="width: 36px;">
                <col style="width: 42px;">
                <col style="width: auto;">
                <col />
            </colgroup>
            <thead>
                <tr style="border-bottom: 1px solid #dee2e6;">
                    <td @onclick="()=> { ShowProp = true; }"><span><i class="fa fa-ellipsis-v"></i></span></td>
                    <th>#</th>
                    <th>Name</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>

                @foreach (FSEntry fse in DE?.SubDirs)
                {
                    string dir = fse.Name;
                    <tr @ondblclick="(() => Navigate(fse.Name))">
                        <td @onclick="()=> {  ShowProp = true; SelectEntry(fse, false);  }"><span><i class="fa fa-ellipsis-v"></i></span></td>
                        <td><span class="i-icon i-folder"></span></td>
                        <td>@fse.Name</td>
                        <td>Folder</td>
                    </tr>
                }

                @foreach (FSEntry fse in DE?.Files)
                {
                    string fle = fse.Name;
                    <tr @ondblclick="(() => NavigateFile(fse))">
                        <td @onclick="()=> { ShowProp = true; SelectEntry(fse, true);  }"><span><i class="fa fa-ellipsis-v"></i></span></td>
                        <td><span class="i-icon @fse.IconicTypeCSS"></span></td>
                        <td>@fse.Name</td>
                        <td>@fse.Atrb</td>
                    </tr>
                }
            </tbody>

        </table>
    </div>
    @if (ShowProp)
    {
        <div class="modal fade show" role="dialog" tabindex="-1" style="display: block; background-color:rgba(0, 0, 0,0.7);z-index: 1052;" aria-modal="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h6 class="modal-title" id="modfoLabel">@(IsSelectedFile ?  "File": "Folder") Properties</h6>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="()=>ShowProp=false">
                            <span aria-hidden="true">×</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        @if (SelFileInfo != null)
                        {
                            <ul class="nav nav-tabs nav-bordered nav-justified">
                                <li class="nav-item">
                                    <a href="#info-p" data-toggle="tab" aria-expanded="false" class="nav-link active">
                                        Info
                                    </a>
                                </li>
                                <li class="nav-item">
                                    <a href="#perview-p" data-toggle="tab" aria-expanded="true" class="nav-link">
                                        Preview
                                    </a>
                                </li>
                            </ul>
                            <div class="tab-content">
                                <div class="tab-pane active" id="info-p">
                                    <center class="mb-10">
                                        <span class="i-icon-ex-lg i-@GetSelectedIcon()"></span>
                                    </center>
                                    <div class="table-responsive">
                                        <table class="file-ex table-borderless table-nowrap">
                                            <thead>
                                                <tr>
                                                    <th>Name</th>
                                                    <th>@SelFileInfo.Name</th>
                                                </tr>
                                                <tr>
                                                    <th>Extention</th>
                                                    <th>@SelFileInfo.Extension</th>
                                                </tr>
                                                <tr>
                                                    <th>Size</th>
                                                    <th>@GetSizeString(SelFileInfo.Length)</th>
                                                </tr>
                                                <tr>
                                                    <th>Created</th>
                                                    <th>@SelFileInfo.CreationTime</th>
                                                </tr>
                                                <tr>
                                                    <th>Last Access</th>
                                                    <th>@SelFileInfo.LastAccessTime</th>
                                                </tr>
                                                <tr>
                                                    <th>Last Write</th>
                                                    <th>@SelFileInfo.LastWriteTime</th>
                                                </tr>
                                                <tr>
                                                    <th>Read Only</th>
                                                    <th>@SelFileInfo.IsReadOnly</th>
                                                </tr>
                                                <tr>
                                                    <th>Attributes</th>
                                                    <th>@SelFileInfo.Attributes</th>
                                                </tr>
                                            </thead>
                                        </table>

                                    </div>
                                </div>
                                <div class="tab-pane" id="perview-p">

                                </div>
                            </div>
                        }
                        else if (SelDirectoryInfo != null)
                        {
                            <center class="mb-10">
                                <span class="i-icon-ex-lg i-folder"></span>
                            </center>
                            <div class="table-responsive">
                                <table class="file-ex table-borderless table-nowrap">
                                    <thead>
                                        <tr>
                                            <th>Name</th>
                                            <th>@SelDirectoryInfo.Name</th>
                                        </tr>
                                        <tr>
                                            <th>Full Name</th>
                                            <th>@SelDirectoryInfo.FullName</th>
                                        </tr>
                                        <tr>
                                            <th>Size</th>
                                            <th></th>
                                        </tr>
                                        <tr>
                                            <th>Created</th>
                                            <th>@SelDirectoryInfo.CreationTime</th>
                                        </tr>
                                        <tr>
                                            <th>Last Access</th>
                                            <th>@SelDirectoryInfo.LastAccessTime</th>
                                        </tr>
                                        <tr>
                                            <th>Last Write</th>
                                            <th>@SelDirectoryInfo.LastWriteTime</th>
                                        </tr>
                                        <tr>
                                            <th>Attributes</th>
                                            <th>@SelDirectoryInfo.Attributes</th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        @if (!IsSelectedFile)
                        {
                            <div class="btn-group">
                                <button type="button" class="btn btn-success active dropdown-toggle" data-toggle="dropdown" aria-expanded="false"><i class="fa fa-plus"></i> New</button>
                                <div class="dropdown-menu">
                                    <a class="dropdown-item" href="javascript:void(0)" @onclick="()=> { ShowNewfolder = true;StateHasChanged(); }"><i class="mr-1 i-icon i-folder"></i> Folder</a>
                                    <div class="dropdown-divider"></div>
                                    <a class="dropdown-item" href="javascript:void(0)" @onclick="()=> { ShowNewfile = true;StateHasChanged(); }"><i class="mr-1 i-icon i-txt"></i> File</a>
                                </div>
                            </div>
                        }
                        <button type="button" class="btn btn-danger" @onclick="()=> { ShowDelete = true;StateHasChanged(); }"><i class="fa fa-trash"></i> Delete</button>
                        <button type="button" class="btn btn-secondary" @onclick="()=> { ShowRename = true;StateHasChanged(); }"><i class="fa fa-pencil"></i> Rename</button>
                    </div>
                </div>
            </div>
        </div>
    }
    @if (ShowDelete)
    {
        <div class="modal fade show" role="dialog" tabindex="-1" style="display: block; background-color:rgba(0, 0, 0,0.7);z-index: 1055;" aria-modal="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-body">
                        <h5 class="modal-title text-center">Delete @(IsSelectedFile ?  "File": "Folder")</h5>
                        <hr />
                        <div class="form-group mb-3">
                            <label>Confirm Delete</label>
                            <input type="text" class="form-control">
                        </div>

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" @onclick="()=> { ShowDelete = false; StateHasChanged(); }"><i class="fa fa-close"></i> Cancel</button>
                        <button type="button" class="btn btn-danger"><i class="fa fa-trash"></i> Delete</button>
                    </div>
                </div>
            </div>
        </div>
    }
    @if (ShowRename)
    {
        <div class="modal fade show" role="dialog" tabindex="-1" style="display: block; background-color:rgba(0, 0, 0,0.7);z-index: 1055;" aria-modal="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-body">
                        <h5 class="modal-title text-center">Rename @(IsSelectedFile ?  "File": "Folder")</h5>
                        <hr />
                        <div class="form-group mb-3">
                            <label>@(IsSelectedFile ?  "File": "Folder") Name</label>
                            <input type="text" class="form-control" value="@(SelectedEntry?.Name)">
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" @onclick="()=> { ShowRename = false; StateHasChanged(); }"><i class="fa fa-close"></i> Cancel</button>
                        <button type="button" class="btn btn-warning"><i class="fa fa-pencil"></i> Rename</button>
                    </div>
                </div>
            </div>
        </div>
    }
    @if (ShowNewfolder)
    {
        <div class="modal fade show" role="dialog" tabindex="-1" style="display: block; background-color:rgba(0, 0, 0,0.7);z-index: 1055;" aria-modal="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-body">
                        <h5 class="modal-title text-center">Create New Folder</h5>
                        <hr />
                        <div class="form-group mb-3">
                            <label>Folder Name</label>
                            <input type="text" class="form-control">
                        </div>

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" @onclick="()=> { ShowNewfolder = false; StateHasChanged(); }"><i class="fa fa-close"></i> Cancel</button>
                        <button type="button" class="btn btn-success active"><i class="fa fa-plus-circle"></i> Create</button>
                    </div>
                </div>
            </div>
        </div>
    }
    @if (ShowNewfile)
    {
        <div class="modal fade show" role="dialog" tabindex="-1" style="display: block; background-color:rgba(0, 0, 0,0.7);z-index: 1055;" aria-modal="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-body">
                        <h5 class="modal-title text-center">Create New File</h5>
                        <hr />
                        <div class="form-group mb-3">
                            <label>File Name</label>
                            <input type="text" class="form-control">
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" @onclick="()=> { ShowNewfile = false; StateHasChanged(); }"><i class="fa fa-close"></i> Cancel</button>
                        <button type="button" class="btn btn-success active"><i class="fa fa-plus-circle"></i> Create</button>
                    </div>
                </div>
            </div>
        </div>
    }
    @if (!string.IsNullOrWhiteSpace(ShowingUrl))
    {
        <div class="modal fade show @(ShowFilePopup?"":"hidden")" role="dialog" tabindex="-1" style="display: @(ShowFilePopup?"block":"none"); background-color:rgba(0, 0, 0,0.7);z-index: 1051;" aria-modal="true">
            <div class="modal-dialog preview-file-ex modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h6 class="modal-title">View File</h6>
                        <div class="btn-group close" role="group" aria-label="Close">
                            <button type="button" class="btn btn-light" @onclick="@(()=> { ShowFilePopup = false; })"><i class="fa fa-minus"></i></button>
                            <button type="button" class="btn btn-danger" @onclick="@(()=> { ShowingUrl = null; })"><i class="fa fa-close"></i></button>
                        </div>
                    </div>
                    <div class="modal-body" style="padding:0px !important;">
                        <iframe src="@ShowingUrl" style="width:100%; height:100%; border-width: 0px;"></iframe>
                    </div>
                    @*<div class="modal-footer">

                    </div>*@
                </div>
            </div>
        </div>
    }
}

@if (!authed || Failed)
{
    <h4> @msg </h4>
}

@code{


    User usr { get; set; }
    bool authed { get; set; }
    bool Failed { get; set; }
    string msg { get; set; }

    bool ShowProp, ShowDelete, ShowRename, ShowNewfolder, ShowNewfile;

    bool ShowFileNewPopup = true;
    bool ShowFilePopup = false;
    string ShowingUrl;

    FSEntry SelectedEntry { get; set; }
    bool IsSelectedFile { get; set; }

    System.IO.FileInfo SelFileInfo;
    System.IO.DirectoryInfo SelDirectoryInfo;

    [Parameter]
    public string Path { get; set; }

    DirectoryEntries DE;


    protected override void OnInitialized()
    {
        
        Failed = false;


        NavMan.LocationChanged += LocationChanged;

        @if (Path == null)
        {
            try
            {
                string q = new Uri(NavMan.Uri).Query.ToString().TrimStart('?');
                Path = Uri.UnescapeDataString(q.TrimStart('?')).Trim('"');
            }
            catch (Exception ex)
            {
                //TODO: Use more understandable err msgs
                Console.WriteLine("Path error " + ex.Message);
                msg = "Path error " + ex.Message;
                Path = "\\";

            }
        }

        usr = Userdata.Auth();
        if (usr == null)
        {
            msg = "Please wait...";
            authed = false;

            return;
        }

        LoadDir();



        base.OnInitialized();

    }

    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        //string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
        //Core.Log($"cd {e.Location} while {Path}");

        int lcq = e.Location.IndexOf('?');
        if(lcq == -1)
        {
            return;
        }

        string lcp = Uri.UnescapeDataString(e.Location.Substring(lcq + 1));
        

        if(lcp != Path)
        {
            Core.Log($"cd lcp {lcp} \t Path {Path}");
            Path = lcp;
            LoadDir();
        }

    }

    //void IDisposable.Dispose()
    //{
    //    // Unsubscribe from the event when our component is disposed
    //    NavigationManager.LocationChanged -= LocationChanged;
    //} 

    string LoadedPath = "`";
    void LoadDir()
    {
        if (LoadedPath == Path)
        {
            return;
        }

        if (usr != null && usr.Validate(Path))
        {
            authed = true;
        }
        else
        {
            authed = false;
            Failed = true;
            return;
        }

        try
        {
            DE = FSService.ListFiles(Path);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Explore error " + Path + " >> " + ex.Message);
            DE = new DirectoryEntries();
            msg = "Cannot load path";
            Failed = true;

            Core.Log(msg + $"\t {Userdata.Token}");
        }

        LoadedPath = Path;

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await TryAuth();
            LoadDir();

            await JSRuntime.InvokeVoidAsync("DrawUI");
        }

        // string QPath;
        try
        {
            string q = new Uri(NavMan.Uri).Query.ToString().TrimStart('?');
            Path = Uri.UnescapeDataString(q.TrimStart('?')).Trim('"');
        }
        catch (Exception)
        {

        }

        await base.OnAfterRenderAsync(firstRender);

    }

    async Task TryAuth()
    {
        if (!authed)
        {
            string ck = await JSRuntime.InvokeAsync<string>("GetCookie", "ut");
            if (ck != null)
            {
                User cu = Core.AuthToken(ck);
                if (cu != null)
                {
                    usr = cu;
                    Userdata.Token = usr.Token();
                    Core.Log($"Explorer Success : Auth Token cookie {ck}");

                    ResetDefault();

                    StateHasChanged();
                    return;
                }
            }

            Core.Log($"Explorer Failed : Auth Token cookie {ck}");
            NavMan.NavigateTo("/?explorer?" + Uri.EscapeDataString(Path), true);
            return;
        }

    }


    void ResetDefault()
    {
        authed = true;
        Failed = false;
        LoadDir();
    }


    public void SelectEntry(FSEntry fse, bool IsFile)
    {
        SelectedEntry = fse;
        IsSelectedFile = IsFile;

        if (IsFile)
        {
            SelDirectoryInfo = null;
            SelFileInfo = FSService.GetFileInfo(System.IO.Path.Combine(DE.Path, fse.Name));
        }
        else
        {
            SelFileInfo = null;
            SelDirectoryInfo = FSService.GetDirectoryInfo(System.IO.Path.Combine(DE.Path, fse.Name));
        }
    }


    string GetSelectedIcon()
    {
        if (SelectedEntry != null)
        {
            return SelectedEntry.IconicTypeCSS;
        }
        return "i-" + FSFileAttrib.Other.ToString();
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        StateHasChanged();
    }


    public void Navigate(string name)
    {
        NavigateAbs(System.IO.Path.Combine(DE.Path, name));
    }
    public void NavigateAbs(string path)
    {
        Path = path;
        NavMan.NavigateTo("explorer?" + Uri.EscapeDataString(path), false);
        LoadDir();
        StateHasChanged();
    }

    public void NavigateBack()
    {
        NavigateAbs(FSService.ParentDir(Path));
    }

    public void NavigateText()
    {
        NavigateAbs(FSService.NavigateText(Path));
    }

    public void NavigateFile(FSEntry fse)
    {
        string fp = Uri.EscapeDataString(System.IO.Path.Combine(DE.Path, fse.Name));
        string ename = Uri.EscapeDataString(fse.Name);
        if (ShowFileNewPopup)
        {
            if (fse.CheckIs(FSFileAttrib.Document | FSFileAttrib.Image))
            {
                ShowingUrl = $"{NavMan.BaseUri}OpenStream/{ename}?" + fp;
            }
            else if (fse.CheckIs(FSFileAttrib.Video))
            {
                ShowingUrl = $"{NavMan.BaseUri}PlayVideo/{ename}?" + fp;
            }
            else if (fse.CheckIs(FSFileAttrib.Audio))
            {
                ShowingUrl = $"{NavMan.BaseUri}PlayAudio/{ename}?" + fp;
            }
            else if (fse.CheckIs(FSFileAttrib.Text))
            {
                //TODO : OpenText
                ShowingUrl = $"{NavMan.BaseUri}OpenStream/{ename}?" + fp;
            }
            else
            {
                ShowingUrl = $"{NavMan.BaseUri}OpenFile/{ename}?" + fp;
            }
            ShowFilePopup = true;
        }
        else
        {
            if (fse.CheckIs(FSFileAttrib.Document | FSFileAttrib.Image))
            {
                NavMan.NavigateTo($"OpenStream/{ename}?" + fp, true);
            }
            else if (fse.CheckIs(FSFileAttrib.Video))
            {
                NavMan.NavigateTo($"PlayVideo/{ename}?" + fp, true);
            }
            else if (fse.CheckIs(FSFileAttrib.Audio))
            {
                NavMan.NavigateTo($"PlayAudio/{ename}?" + fp, true);
            }
            else if (fse.CheckIs(FSFileAttrib.Text))
            {
                //TODO : OpenText
                NavMan.NavigateTo($"OpenStream/{ename}?" + fp, true);
            }
            else
            {
                OpenInNewTab($"OpenFile/{ename}?" + fp);
            }
        }
    }

    public async void OpenInNewTab(string Path)
    {
        await JSRuntime.InvokeVoidAsync("OpenNew", Path);
    }

    string GetSizeString(long size)
    {
        int ext = 0;
        long Size = size;
        string Suffix = "";
        while (Size > 1024)
        {
            ext++;
            Size /= 1024;
        }
        switch (ext)
        {
            case 0:
                Suffix = "bytes";
                break;
            case 1:
                Suffix = "KB";
                break;
            case 2:
                Suffix = "MB";
                break;
            case 3:
                Suffix = "GB";
                break;
            case 4:
                Suffix = "TB";
                break;
        }
        return $"{Size} {Suffix}";
    }

    Dictionary<string, string> PathToBreadCrumb(string path)
    {
        var Out = new Dictionary<string, string>();
        string s = "";
        foreach (var item in path.Split(System.IO.Path.DirectorySeparatorChar))
        {
            if (!string.IsNullOrWhiteSpace(item))
            {
                s += item;
                s += "%5C";
                Out.Add($"{s}", item);
            }
        }
        return Out;
    }

}