@page "/settings"
@inject Microsoft.AspNetCore.Components.NavigationManager NavMan
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@inject UserData Userdata
@using AirShare;


@* <div class="form-group">
    <input class="btn btn-success" type="button" @onclick="(() => Add())" value="Add" />
    </div> *@

<h2>Settings</h2>

<div>
    <a href="/users"><i class="bx bx-user font-15"></i> User Management</a>
</div>

<br />
<br />

<h2> @msg </h2>

<br />
<br />
<br />
<h2> Excecute Programs </h2>


@if (authed)
{
    <div>

    <input type="button" @onclick="() => RunSample()" value="Run Sample program" />
    <br />
    <br />
    This Will Update Airshare from github
    <input type="button" @onclick="() => UpdateAir_Share()" value="Update AirShare to the Lastest version" />
    <br />
    <br />
    <table>
        <tr>
            <td colspan="3">@(AirShare.Settings.SystemControlSettings.AutoUpdate ? "AirShare Auto Update from Github is enabled" : "AirShare Auto Update from Github is disabled")</td>
            <td colspan="2"><input type="button" @onclick="() => SwitchAutoUpdate()" value="Switch" /></td>
        </tr>
        <tr>
            <td colspan="3">@LetMeSleepStat</td>
            <td colspan="2"><input type="button" @onclick="() => SwitchLetMeSleep()" value="Switch" /></td>
        </tr>
        <tr>
            <td>
                Range 1
                From
                <input class="form-control" type="number"
                    @bind="AirShare.Settings.SystemControlSettings.LetMeSleepStart1" />
            </td>
            <td>
                To
                <input class="form-control" type="number"
                    @bind="AirShare.Settings.SystemControlSettings.LetMeSleepEnd1" />
            </td>
            <td>
                Range 2
                From
                <input class="form-control" type="number"
                    @bind="AirShare.Settings.SystemControlSettings.LetMeSleepStart2" />
            </td>
            <td>
                To
                <input class="form-control" type="number"
                    @bind="AirShare.Settings.SystemControlSettings.LetMeSleepEnd2" />
            </td>
            <td><input type="button" @onclick="() => SaveSystemControlSettings()" value="Save" /></td>
        </tr>
    </table>
    <br />
    <br />
    <br />


    <textarea class="form-control" name="ProgOut" cols="40" rows="20" @bind="ProgOut"></textarea>
    <textarea class="form-control" name="ProgErr" cols="40" rows="20" @bind="ProgErr"></textarea>


</div>
}




@code
{
    string msg { get; set; }

    User usr { get; set; }
    bool authed { get; set; } = false;
    bool Failed { get; set; }

    string ProgOut { get; set; }
    string ProgErr { get; set; }



    protected override void OnInitialized()
    {

        Failed = false;



        usr = Userdata.Auth();
        if (usr == null)
        {
            msg = "";
            authed = false;

            return;
        }



        base.OnInitialized();

    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await TryAuth();
        }


    }

    async Task TryAuth()
    {
        if (!authed)
        {
            string ck = await JSRuntime.InvokeAsync<string>("GetCookie", "ut");
            if (ck != null)
            {
                User cu = Core.AuthToken(ck);
                if (cu != null)
                {
                    usr = cu;
                    if (usr.Lvl >= UserLevel.root)
                    {
                        Userdata.Token = usr.Token();
                        Core.Log($"Settings Success : Auth Token cookie {ck}");

                        ResetDefault();

                        StateHasChanged();
                        return;
                    }
                    else
                    {
                        msg = "You are not an Admin";
                        NavMan.NavigateTo("/signout", true);
                        return;
                    }
                }
            }

            Core.Log($"Settings Failed : Auth Token cookie {ck}");
            NavMan.NavigateTo("/?Settings", true);
            return;
        }

    }


    void ResetDefault()
    {
        authed = true;
        Failed = false;
    }


    void RunSample()
    {
        try
        {
            msg = ProgramMgr.RunSample(new ProgramIO() { OutputRec = ProgOutRec, ErrorRec = ProgErrRec }) ? "Program Started" :
                "Program starting failed";
            ProgOut = "";
            ProgErr = "";
            StateHasChanged();
        }
        catch (System.Exception ex)
        {
            msg = ex.Message;
        }

    }

    async void ProgOutRec(string S)
    {
        ProgOut = S + Environment.NewLine + ProgOut;
        await InvokeAsync(StateHasChanged);
    }
    async void ProgErrRec(string S)
    {
        ProgErr = S + Environment.NewLine + ProgErr;
        await InvokeAsync(StateHasChanged);
    }

    void UpdateAir_Share()
    {
        msg = ProgramMgr.UpdateCodeBase(new ProgramIO() { OutputRec = ProgOutRec, ErrorRec = ProgErrRec }) ? "Updating" :
            "Program starting failed";
        ProgOut = "";
        ProgErr = "";
        StateHasChanged();
    }

    string LetMeSleepStat
    {
        get
        {
            return $"Let me sleep is turned {(AirShare.Settings.SystemControlSettings.LetMeSleep ? "on" : "off") }";
        }
    }

    public void SwitchLetMeSleep()
    {
        AirShare.Settings.SystemControlSettings.LetMeSleep = !AirShare.Settings.SystemControlSettings.LetMeSleep;

        SaveSystemControlSettings();
    }
    public void SaveSystemControlSettings()
    {
        AirShare.Settings.SaveSystemControlSettings();
    }

    public void SwitchAutoUpdate()
    {
        AirShare.Settings.SystemControlSettings.AutoUpdate = !AirShare.Settings.SystemControlSettings.AutoUpdate;
        SaveSystemControlSettings();
    }

}