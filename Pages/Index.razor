@page "/"
@using AirShare;
@inject Microsoft.AspNetCore.Components.NavigationManager NavMan
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@inject UserData Userdata
@* @inject Blazored.LocalStorage.ILocalStorageService localStorage *@

<div class="card mb-30 border">

    <div class="card-body pb-0">
        <div class="card-header border-none bg-transparent d-flex align-items-center justify-content-between p-0 mb-30">
            <div class="widgets-card-title">
                <h5 class="card-title mb-0">♦ Login</h5>
            </div>
        </div>
        @if (!string.IsNullOrWhiteSpace(msg))
        {
            <div class="alert alert-danger">@msg</div>
        }
        <div class="form-group mb-3">
            <label>Username</label>
            <input type="text" class="form-control" @bind="TxtName">
        </div>
        <div class="form-group mb-3">
            <label>Password</label>
            <input type="password" class="form-control" @bind="TxtPass">
        </div>
        <div class="form-group mb-3">
            <a class="btn btn-rounded btn-success text-white" @onclick="(() => Login())" style="width:100%">Login</a>
        </div>
    </div>
</div>

@code
{
    string msg { get; set; }
    string TxtName { get; set; }
    string TxtPass { get; set; }

    [Parameter]
    public string Path { get; set; }

    protected override void OnInitialized()
    {
        if (Path == null)
        {
            try
            {
                string q = new Uri(NavMan.Uri).Query.ToString().TrimStart('?');
                Path = Uri.UnescapeDataString(q.TrimStart('?')).Trim('"');
                if (Path.Length == 0) Path = null;
            }
            catch (Exception)
            {
                Path = null;
            }
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string ck = await JSRuntime.InvokeAsync<string>("GetCookie", "ut");
            if (ck != null)
            {
                Core.Log($"Auth Token cookie {ck}");
                User cu = Core.AuthToken(ck);
                if (cu != null)
                {
                    await Go(cu);
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("EraseCookie", "ut");
                }

            }
        }
    }

    public async void Login()
    {
        User usr = Core.Auth(TxtName, TxtPass);
        await Go(usr);

    }

    public async Task Go(User usr)
    {
        if (usr != null)
        {
            Userdata.Token = usr.Token();
            await JSRuntime.InvokeVoidAsync("SetCookie", "ut", Userdata.Token);
            msg = "Success " + usr.Name;

            if (Path == null)
            {
                Path = "\\";
            }

            if (!usr.Validate(Path))
            {
                if (usr.Allowed.Length != 0)
                {
                    Path = usr.Allowed[0];
                }
                else
                {
                    Path = Core.CreateAirSharedDir();
                }
            }

            Core.Log($"Logged in {usr.Name} as {usr.Lvl} user");

            NavMan.NavigateTo("explorer?" + Uri.EscapeDataString(Path), false);
        }
        else
        {
            msg = "Wrong user name / password";
        }

    }

}